https://www.imooc.com/video/3639--学习网址
一、java.io.File 类用于表示文件、目录
File类只用于表示文件、目录的信息（名称、大小、路径、存在与否、创建、删除等），不能用于文件内容的访问。

二、RandomAccessFile java 提供的对文件内容的访问，既可以读文件、又可以写文件
RandomAccessFile 支持随记访问文件，可以访问文件的任意位置。

1、java文件模型：在硬盘上的文件是 byte byte byte存储的，是数据的集合。

2、打开文件：两种模式，即 读写“rw”与只读“r”,RandomAccessFile raf = new RandomAccessFile(file，"rw");
             文件指针，打开文件指针在开头pointer=0

3、写方法：raf.wirte(int)--->只写一个字节（后8位），同时指针指向下一个位置，准备随时写入。

4、读方法：int b = raf.read()--->只读一个字节。

5、文件读写完成以后一定要关闭（官方文档说明）。

三、IO流（输入流、输出流）
字节流、字符流
1、字节流：如InputStream（抽象了应用程序读取数据的方式）、OutputStream（抽象了应用程序写出数据的方式）.

2、EOF=End  读到-1表示读到了结尾。

3、输入流基本方法
FileInputStream in = new FileInputStream(fileName);
int b = in.read();读取一个字节无符号填充到int 低8位，-1 是EOF。
in.read(byte[] buf).-->读取数据填充到字节数组buf，返回的是读到字节的个数.
in.read(byte[] buf,int start,int size)-->读取数据到字节数组buf，从buf的start位置开始，存放size 长度数据。

4、输出流基本方法
FileOutputStream out = new FileOutputStream(fileName);
out.write(int b);写出一个byte到流，b的低8位。
out.write(byte [] buf);将buf 字节数组都写入到流中。
out.write(byte [] buf,int start,int size);字节数组从start 位置，开始写size长度的字节到流。

 5)FileInputStream--->具体实现了在文件上读取数据
 6)FileOutputStream 实现了向文件中写出byte数据的方法
 7)DataOutputStream/DataInputStream
    对"流"功能的扩展，可以更加方面的读取int,long，字符等类型数据
   DataOutputStream
        writeInt()/writeDouble()/writeUTF()

 8)BufferedInputStream&BufferedOutputStream
 这两个流类位IO提供了带缓冲区的操作，一般打开文件进行写入
 或读取操作时，都会加上缓冲，这种流模式提高了IO的性能
 从应用程序中把输入放入文件，相当于将一缸水倒入到另一个缸中:
 FileOutputStream--->write()方法相当于一滴一滴地把水“转移”过去
 DataOutputStream-->writeXxx()方法会方便一些，相当于一瓢一瓢把水“转移”过去
 BufferedOutputStream--->write方法更方便，相当于一飘一瓢先放入桶中，再从桶中倒入到另一个缸中，性能提高了


 2.字符流
 1) 编码问题
 2)认识文本和文本文件
 java的文本(char)是16位无符号整数，是字符的unicode编码（双字节编码)
 文件是byte byte byte ...的数据序列
文本文件是文本(char)序列按照某种编码方案(utf-8,utf-16be,gbk)序列化为byte的存储结果
3)字符流(Reader Writer)---->操作的是文本文本文件
字符的处理，一次处理一个字符
字符的底层任然是基本的字节序列
字符流的基本实现
   InputStreamReader   完成byte流解析为char流,按照编码解析
   OutputStreamWriter  提供char流到byte流，按照编码处理

   FileReader/FileWriter
 字符流的过滤器
   BufferedReader   ---->readLine 一次读一行
   BufferedWriter/PrintWriter   ---->写一行


3.对象的序列化，反序列化
1)对象序列化，就是将Object转换成byte序列，反之叫对象的反序列化
2)序列化流(ObjectOutputStream),是过滤流----writeObject
   反序列化流(ObjectInputStream)---readObject

3)序列化接口(Serializable)
   对象必须实现序列化接口 ，才能进行序列化，否则将出现异常
   这个接口，没有任何方法，只是一个标准

4) transient关键字
    private void writeObject(java.io.ObjectOutputStream s)
		        throws java.io.IOException
	private void readObject(java.io.ObjectInputStream s)
		        throws java.io.IOException, ClassNotFoundException

   分析ArrayList源码中序列化和反序列化的问题

5)序列化中 子类和父类构造函数的调用问题
